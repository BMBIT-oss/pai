from paradox.event import EventLevel


property_map = {
        'dc': dict(level=EventLevel.DEBUG, tags=['voltage'], type='system', 
            message="DC voltage is {value}"),
        'vdc': dict(level=EventLevel.DEBUG, tags=['voltage'], type='system', 
            message="VDC voltage is {value}"),
        'battery': dict(level=EventLevel.DEBUG, tags=['voltage'], type='system', 
            message="Battery voltage is {value}"),

	#### Status 0
        'trouble': dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
            message={"True":"Trouble", "False": "No trouble"}),
	'timer_loss_trouble': dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
		message={"True":"Timer lost trouble", "False": "Timer recovered"}),
	"fire_loop_trouble": dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
		message={"True":"Fire loop", "False": "Fire loop recovered"}),
        "module_tamper_trouble": dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
		message={"True":"Module tampered", "False": "Module tamper cleared"}),
        "zone_tamper_trouble": dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
		message={"True":"Zone tampered", "False": "Zone tamper cleared"}),
        "communication_trouble": dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
		message={"True":"Communication trouble", "False": "Communication restored"}),
        "bell_trouble": dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
		message={"True":"Bell trouble", "False": "Bell restored"}),
    "power_trouble": dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
		message={"True":"Power trouble", "False": "Power restored"}),
    "rf_low_battery_trouble": dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
		message={"True":"RF battery low", "False": "RF battery OK"}),
    "rf_interference_trouble": dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
		message={"True":"RF Interference trouble", "False": "RF Interference cleared"}),
    "module_supervision_trouble": dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
		message={"True":"Module supervision trouble", "False": "Module supervision OK"}),
    "zone_supervision_trouble": dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
		message={"True":"Zone supervision trouble", "False": "Zone supervision OK"}),
    "wireless_repeater_battery_trouble": dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
		message={"True":"Wireless repeater battery is low", "False": "Wireless repeater battery is adequate"}),
    "wireless_repeater_ac_loss_trouble": dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
		message={"True":"Wireless reapeater lost AC Power", "False": "Wireless repeater AC Power restored"}),
    "wireless_keypad_battery_trouble": dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
		message={"True":"Wireless keypad battery level is low", "False": "Wireless keypad battery level is adequate"}),
    "wireless_keypad_ac_trouble": dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
		message={"True":"Wireless keypad lost AC Power", "False": "Wireless keypad AC Power restored"}),
    "auxiliary_output_overload_trouble": dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
		message={"True":"Auxiliary output overloaded", "False": "Auxiliary output load is adequate"}),
    "ac_failure_trouble": dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
		message={"True":"AC Power failure", "False": "AC Power restored"}),
    "low_battery_trouble": dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
		message={"True":"Battery is low", "False": "Battery level is adequate"}),
     "bell_output_overload_trouble": dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
		message={"True":"Bell output overloaded", "False": "Bell output load is adequate"}),
    "bell_output_disconnected_trouble": dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
		message={"True":"Bell output disconnected", "False": "Bell output connected"}),
    "computer_fail_to_communicate_trouble": dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
		message={"True":"PC communication failed", "False": "PC communication OK"}),
    "voice_fail_to_communicate_trouble": dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
		message={"True":"Voice module communication failed", "False": "Voice module communication OK"}),
    "pager_fail_to_communicate_trouble": dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
		message={"True":"Pager communication failed", "False": "Pager communication OK"}),
    "central_2_reporting_ftc_indicator_trouble": dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
		message={"True":"Central 2 reporting trouble", "False": "Central 2 reporting OK"}),
    "central_1_reporting_ftc_indicator_trouble": dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
		message={"True":"Central 1 reporting trouble", "False": "Central 1 reporting OK"}),
    "telephone_line": dict(level=EventLevel.CRITICAL, tags=['trouble'], type='system', 
		message={"True":"Telephone line trouble", "False": "Telephone line OK"}),
    ######
	"zone_open": dict(level=EventLevel.DEBUG, type='zone', id=None, 
                message={"True":"Zone {label} open", "False": "Zone {label} closed"}),
	"zone_tamper": dict(level=EventLevel.CRITICAL, type='zone', id=None,
		message={"True":"Zone {label} tampered", "False": "Zone {label} not tampered"}), 
	"pgm_tamper": dict(level=EventLevel.CRITICAL, type='pgm', id=None,
		message={"True":"PGM {label} tampered", "False": "PGM {label} not tampered"}),
	"bus-module_tamper": dict(level=EventLevel.CRITICAL, type='bus-module', id=None, 
		message={"True":"Bus Module {label} tampered", "False": "Bus Module {label} not tampered"}),
	"zone_fire": dict(level=EventLevel.CRITICAL, type='zone', id=None, 
		message={"True":"Zone {label} on fire", "False": "Zone {label} not on fire"}),

	###### Status 1
        'rf_noise_floor': dict(level=EventLevel.DEBUG, tags=['RF'], type='system', 
            message="RF Noise floor is {value}"),

	###### Status 2
	"zone_status": dict(level=EventLevel.DEBUG, type='zone', id=None, 
                message={"True": "Zone {label} Open", "False": "Zone {label} Closed"}),
	###### Status 3
	"zone_signal_strength": dict(level=EventLevel.DEBUG, type='zone', id=None, 
		message="Zone {label} signal strength {value}"),
	##### Status 4
	"pgm_signal_strength": dict(level=EventLevel.DEBUG, type='pgm', id=None, 
		message="PGM {label} signal strength {value}"),
	"repeater_signal_strength": dict(level=EventLevel.DEBUG, type='repeater', id=None, 
		message="Repeater {label} signal strength {value}"),
	"keypad_signal_strength": dict(level=EventLevel.DEBUG, type='keypad', id=None, 
		message="PGM {label} signal strength {value}"),
	##### Status 5
	"zone_exit_delay": dict(level=EventLevel.DEBUG, type='zone', id=None, 
		message={"True":"Zone {label} in exit delay", "False": "Zone {label} not in exit delay"}),

}
